;#!/usr/local/bin/sbcl --script

;;;;   Hey, Emacs, this is a -*- Mode: Lisp; Syntax: Common-Lisp -*- file!
;;;;
;;;;   Pascal is for building pyramidsâ€”imposing, breathtaking, static structures built by armies pushing heavy blocks into place. Lisp is for building organisms...
;;;;   -- Alan Perlis
;;;;
;;;;   Name:               roman-state.lisp
;;;;
;;;;   Started:            Sat Mar 20 21:54:18 2021
;;;;   Modifications:
;;;;
;;;;   Purpose:
;;;;
;;;;
;;;;
;;;;   Calling Sequence:
;;;;
;;;;
;;;;   Inputs:
;;;;
;;;;   Outputs:
;;;;
;;;;   Example:
;;;;
;;;;   Notes:
;;;;
;;;;
(load "/home/slytobias/lisp/packages/test.lisp")

(defpackage :roman-state (:use :common-lisp :test))

(in-package :roman-state)

(defun recognize-roman (r)
  (let ((input (init r)))
    (labels ((consume ()
               (pop input))
             (start ()
               (case (consume)
                 ((nil) (fail "Empty sequence"))
                 (i (i1))
                 (v (v2))
                 (x (x2))
                 (l (l2))
                 (c (c2))
                 (d (d2))
                 (m (m2))
                 (otherwise (fail "Error START"))))
             (i1 ()
               (case (consume)
                 ((nil) t)
                 (i (i2))
                 (v (v1))
                 (x (x1))
                 (otherwise (fail "Error I1"))))
             (i2 ()
               (case (consume)
                 ((nil) t)
                 (i (i3))
                 (otherwise (fail "Error I2"))))
             (i3 ()
               (case (consume)
                 ((nil) t)
                 (otherwise (fail "Error I3"))))
             (i4 ()
               (case (consume)
                 ((nil) t)
                 (i (i2))
                 (otherwise (fail "Error I4"))))
             (v1 ()
               (case (consume)
                 ((nil) t)
                 (otherwise (fail "Error V1"))))
             (v2 ()
               (case (consume)
                 ((nil) t)
                 (i (i4))
                 (otherwise (fail "Error V2"))))
             (x1 ()
               (case (consume)
                 ((nil) t)
                 (otherwise (fail "Error X1"))))
             (x2 ()
               (case (consume)
                 ((nil) t)
                 (i (i1))
                 (v (v2))
                 (x (x3))
                 (l (l1))
                 (c (c1))
                 (otherwise (fail "Error X2"))))
             (x3 ()
               (case (consume)
                 ((nil) t)
                 (i (i1))
                 (v (v2))
                 (x (x4))
                 (otherwise (fail "Error X3"))))
             (x4 ()
               (case (consume)
                 ((nil) t)
                 (i (i1))
                 (v (v2))
                 (otherwise (fail "Error X4"))))
             (l1 ()
               (case (consume)
                 ((nil) t)
                 (i (i1))
                 (v (v2))
                 (otherwise (fail "Error L1"))))
             (l2 ()
               (case (consume)
                 ((nil) t)
                 (i (i1))
                 (v (v2))
                 (x (x2))
                 (otherwise (fail "Error L2"))))
             (c1 ()
               (case (consume)
                 ((nil) t)
                 (i (i1))
                 (v (v2))
                 (otherwise (fail "Error C1"))))
             (c2 ()
               (case (consume)
                 ((nil) t)
                 (i (i1))
                 (v (v2))
                 (x (x2))
                 (l (l2))
                 (c (c3))
                 (d (d1))
                 (m (m1))
                 (otherwise (fail "Error C2"))))
             (c3 ()
               (case (consume)
                 ((nil) t)
                 (i (i1))
                 (v (v2))
                 (x (x2))
                 (l (l2))
                 (c (c4))
                 (otherwise (fail "Error C3"))))
             (c4 ()
               (case (consume)
                 ((nil) t)
                 (i (i1))
                 (v (v2))
                 (x (x2))
                 (l (l2))
                 (otherwise (fail "Error C4"))))
             (d1 ()
               (case (consume)
                 ((nil) t)
                 (i (i1))
                 (v (v2))
                 (x (x2))
                 (l (l2))
                 (otherwise (fail "Error D1"))))
             (d2 ()
               (case (consume)
                 ((nil) t)
                 (i (i1))
                 (v (v2))
                 (x (x2))
                 (l (l2))
                 (c (c2))
                 (otherwise (fail "Error D2"))))
             (m1 ()
               (case (consume)
                 ((nil) t)
                 (i (i1))
                 (v (v2))
                 (x (x2))
                 (l (l2))
                 (otherwise (fail "Error M1"))))
             (m2 ()
               (case (consume)
                 ((nil) t)
                 (i (i1))
                 (v (v2))
                 (x (x2))
                 (l (l2))
                 (c (c2))
                 (d (d2))
                 (m (m3))
                 (otherwise (fail "Error M2"))))
             (m3 ()
               (case (consume)
                 ((nil) t)
                 (i (i1))
                 (v (v2))
                 (x (x2))
                 (l (l2))
                 (c (c2))
                 (d (d2))
                 (m (m4))
                 (otherwise (fail "Error M3"))))
             (m4 ()
               (case (consume)
                 ((nil) t)
                 (i (i1))
                 (v (v2))
                 (x (x2))
                 (l (l2))
                 (c (c2))
                 (d (d2))
                 (otherwise (fail "Error M4"))))
             (fail (msg)
               (error "Invalid Roman numeral: ~A" msg)))
      (start))))

(defun init (r)
  (typecase r
    (list r)
    (string (map 'list #'(lambda (ch) (intern (string (char-upcase ch)))) r))))
