;#!/usr/local/bin/clisp
;;;;    Hey, Emacs, this is a -*- Mode: Lisp; Syntax: Common-Lisp -*- file!
;;;;
;;;;   Name:               ch02.lisp
;;;;
;;;;   Started:            Tue Jul  1 01:40:47 2003
;;;;   Modifications:
;;;;
;;;;   Purpose:
;;;;
;;;;
;;;;
;;;;   Calling Sequence:
;;;;
;;;;
;;;;   Inputs:
;;;;
;;;;   Outputs:
;;;;
;;;;   Example:
;;;;
;;;;   Notes:
;;;;
;;;;

;;;
;;;    2.11.2
;;;
(defun add2 (x)
  "Add 2 to numeric argument."
  (assert (numberp x) (x) "Argument should be a number.")
  (+ x 2))

(defun add5 (x)
  "Add 5 to numeric argument."
  (assert (numberp x) (x) "Argument should be a number.")
  (+ x 5))

(defun double (x)
  "Double numeric argument."
  (assert (numberp x) (x) "Argument should be a number.")
  (* x 2))

(defun min-abs4 (x0 x1 x2 x3)
  "Return smallest magnitude value of 4 numbers."
  (assert (numberp x0) (x0) "Argument should be a number.")
  (assert (numberp x1) (x1) "Argument should be a number.")
  (assert (numberp x2) (x2) "Argument should be a number.")
  (assert (numberp x3) (x3) "Argument should be a number.")
  (min (abs x0) (abs x1) (abs x2) (abs x3)))

(defun min-abs4 (x0 x1 x2 x3)
  "Return smallest magnitude value of 4 numbers."
  (assert (every #'numberp '(x0 x1 x2 x3)) ()
	  "All arguments should be numbers.")
  (min (abs x0) (abs x1) (abs x2) (abs x3)))

(defun min-abs (&rest numbers)
  "Return smallest magnitude value of a group of numbers."
  (assert (every #'numberp numbers)
	  ()
	  "All arguments should be numbers.")
  (apply #'min (mapcar #'abs numbers)))

(defun max-abs4 (x0 x1 x2 x3)
  "Return largest magnitude value of 4 numbers."
  (assert (every #'numberp '(x0 x1 x2 x3)) ()
	  "All arguments should be numbers.")
  (max (abs x0) (abs x1) (abs x2) (abs x3)))

;;;
;;;    2.11.4 (Zeller's Congruence)
;;;
(defun zeller (n m c y l)
  (mod (+ n
	  (floor (- (* 13/5 m) 0.2))
	  y
	  (floor y 4)
	  (floor c 4)
	  (- (* 2 c))
	  (- (* (1+ l)
		(floor m 11))))
       7))

;;;
;;;    2.11.5
;;;
(defun my-signum (x)
  (or (and (zerop x) x)
      (/ x (abs x))))

(defun interest-rate (money)
  (or (and (<= money 0) 0)
      (and (< money 1000) 2)
      (and (< money 10000) 5)
      (and (< money 100000) 7)
      10))

;;;
;;;    2.11.7
;;;
(defun go-to-movie-p (age cash)
  (assert (typep age '(real (0) 150)) (age) "AGE is invalid.")
  (cond ((< age 12) (> cash 3.0))
	((< age 65) (> cash 7.0))
	(t (> cash 4.5))))

;;;
;;;    2.11.10
;;;
;;;    This is backwards. This is how to define TRUNCATE given FLOOR.
;;;    For the correct way, see the 'old' version.
;;;    
; (defun my-floor (x)
;   "Return FLOOR of numeric argument."
;   (assert (numberp x) (x) "Argument must be numeric.")
;   (if (minusp x)
;       (- (truncate (- x)))
;       (truncate x)))
