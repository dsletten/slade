;#!/usr/local/bin/sbcl --script

;;;;   Hey, Emacs, this is a -*- Mode: Lisp; Syntax: Common-Lisp -*- file!
;;;;
;;;;   Programming should be fun. Programs should be beautiful.
;;;;   -- Paul Graham
;;;;
;;;;   Name:               backquote.lisp
;;;;
;;;;   Started:            Sun Jan  8 04:11:58 2012
;;;;   Modifications:
;;;;
;;;;   Purpose:
;;;;
;;;;
;;;;
;;;;   Calling Sequence:
;;;;
;;;;
;;;;   Inputs:
;;;;
;;;;   Outputs:
;;;;
;;;;   Example:
;;;;
;;;;   Notes:
;;;;   Common Lisp The Reference pg. 644 \
;;;;                                      >-------Clearly the basis for http://www.lispworks.com/documentation/HyperSpec/Body/02_df.htm
;;;;   Common Lisp The Language pg. 527  /
;;;;     Appendix C:
;;;;   ~/lisp/clozure/ccl/lib/backquote.lisp
;;;;
;;;;   ~/lisp/sbcl/sbcl-1.0.43/src/code/backq.lisp
;;;;   ~/lisp/sbcl/sbcl-1.0.43/tests/backq.impure.lisp   (Tests from Appendix C above??)
;;;;
;;;;
;;;;   Adapted from SBCL.
;;;;   ~/lisp/abcl/abcl-src-1.5.0/src/org/armedbear/lisp/backquote.lisp
;;;;
;;;;
(load "/Users/dsletten/lisp/packages/test.lisp")

(defpackage :backquote (:use :common-lisp :test))

(in-package :backquote)

;;;
;;;    CLHS section 2.4.6 example
;;;
`(cond ((numberp ,x) ,@y) (t (print ,x) ,@y))

(let ((x 8)
      (y '((incf x) (* x 2))))
  `(cond ((numberp ,x) ,@y) (t (print ,x) ,@y)))

(let ((x 8)
      (y '((incf x) (* x 2))))
  `(cond ((numberp ,x) ,@y) (t (print ,x) ,@y) . nil))

;; (let ((x 8)
;;       (y '((incf x) (* x 2))))
;;   (append [cond] [((numberp ,x) ,@y)] [(t (print ,x) ,@y)] '()))

(let ((x 8)
      (y '((incf x) (* x 2))))
  (append (list `cond) (list `((numberp ,x) ,@y)) (list `(t (print ,x) ,@y)) '()))

(let ((x 8)
      (y '((incf x) (* x 2))))
  (append (list 'cond) (list `((numberp ,x) ,@y . nil)) (list `(t (print ,x) ,@y . nil)) '()))

;; (let ((x 8)
;;       (y '((incf x) (* x 2))))
;;   (append (list 'cond) (list (append [(numberp ,x)] [,@y] '())) (list (append [t] [(print ,x)] [,@y] '())) '()))

(let ((x 8)
      (y '((incf x) (* x 2))))
  (append (list 'cond) (list (append (list `(numberp ,x)) y '())) (list (append (list `t) (list `(print ,x)) y '())) '()))

(let ((x 8)
      (y '((incf x) (* x 2))))
  (append (list 'cond) (list (append (list `(numberp ,x . nil)) y '())) (list (append (list 't) (list `(print ,x . nil)) y '())) '()))

;; (let ((x 8)
;;       (y '((incf x) (* x 2))))
;;   (append (list 'cond) (list (append (list (append [numberp] [,x] '())) y '())) (list (append (list 't) (list (append [print] [,x] '())) y '())) '()))

(let ((x 8)
      (y '((incf x) (* x 2))))
  (append (list 'cond) (list (append (list (append (list `numberp) (list x) '())) y '())) (list (append (list 't) (list (append (list `print) (list x) '())) y '())) '()))

(let ((x 8)
      (y '((incf x) (* x 2))))
  (append (list 'cond) (list (append (list (append (list 'numberp) (list x) '())) y '())) (list (append (list 't) (list (append (list 'print) (list x) '())) y '())) '()))

(let ((x 8)
      (y '((incf x) (* x 2))))
  (list 'cond
        (cons (list 'numberp x) y)
        (list* t (list 'print x) y)))

;;================================================================================
(let ((b 3))
  `(a b ,b ,(+ b 1) b))
=> (A B 3 4 B)

`(a b ,b ,(+ b 1) b)
`(a b ,b ,(+ b 1) b . nil)
(append [a] [b] [,b] [,(+ b 1)] [b] '())
(append (list `a) (list `b) (list b) (list (+ b 1)) (list `b) '())
(append (list 'a) (list 'b) (list b) (list (+ b 1)) (list 'b) '())

(let ((b 3))
  (append (list 'a) (list 'b) (list b) (list (+ b 1)) (list 'b) '()))


;;================================================================================
(let ((x '(a b c)))
  `(x ,x ,@x foo ,(cadr x) bar ,(cdr x) baz ,@(cdr x)))

`(x ,x ,@x foo ,(cadr x) bar ,(cdr x) baz ,@(cdr x))
`(x ,x ,@x foo ,(cadr x) bar ,(cdr x) baz ,@(cdr x) . nil)
(append [x] [,x] [,@x] [foo] [,(cadr x)] [bar] [,(cdr x)] [baz] [,@(cdr x)] '())
(append (list `x) (list x) x (list `foo) (list (cadr x)) (list `bar) (list (cdr x)) (list `baz) (cdr x) '())
(append (list 'x) (list x) x (list 'foo) (list (cadr x)) (list 'bar) (list (cdr x)) (list 'baz) (cdr x) '())

(let ((x '(a b c)))
  (append (list 'x) (list x) x (list 'foo) (list (cadr x)) (list 'bar) (list (cdr x)) (list 'baz) (cdr x) '()))

;;================================================================================
(let ((a 1)
      (c 3)
      (d '(4 5 6)))
  `((,a b) ,c ,@d))

`((,a b) ,c ,@d)
`((,a b) ,c ,@d . nil)
(append [(,a b)] [,c] [,@d] '())
(append (list `(,a b)) (list c) d '())
(append (list `(,a b . nil)) (list c) d '())
(append (list (append [,a] [b] '())) (list c) d '())
(append (list (append (list a) (list `b) '())) (list c) d '())
(append (list (append (list a) (list 'b) '())) (list c) d '())

(let ((a 1)
      (c 3)
      (d '(4 5 6)))
  (append (list (append (list a) (list 'b) '())) (list c) d '()))


;;================================================================================
;;;
;;;    Seibel pg. 95
;;;    
(let ((a 1)
      (c 3))
  `(a (+ 1 2) c))

`(a (+ 1 2) c)
`(a (+ 1 2) c .nil)
(append [a] [(+ 1 2)] [c] '())
(append (list `a) (list `(+ 1 2)) (list `c) '())
(append (list 'a) (list `(+ 1 2 . nil)) (list 'c) '())
(append (list 'a) (list (append [+] [1] [2] '())) (list 'c) '())
(append (list 'a) (list (append (list `+) (list `1) (list `2) '())) (list 'c) '())
(append (list 'a) (list (append (list '+) (list '1) (list '2) '())) (list 'c) '())

(let ((a 1)
      (c 3))
  (append (list 'a) (list (append (list '+) (list '1) (list '2) '())) (list 'c) '()))


(let ((a 1)
      (c 3))
  `(a ,(+ 1 2) c))

`(a ,(+ 1 2) c)
`(a ,(+ 1 2) c . nil)
(append [a] [,(+ 1 2)] [c] '())
(append (list `a) (list (+ 1 2)) (list `c) '())
(append (list 'a) (list (+ 1 2)) (list 'c) '())

(let ((a 1)
      (c 3))
  (append (list 'a) (list (+ 1 2)) (list 'c) '()))


(let ((a 1)
      (c 3))
  `(a (list 1 2) c))

`(a (list 1 2) c)
`(a (list 1 2) c . nil)
(append [a] [(list 1 2)] [c] '())
(append (list `a) (list `(list 1 2)) (list `c) '())
(append (list 'a) (list `(list 1 2 . nil)) (list 'c) '())
(append (list 'a) (list (append [list] [1] [2] '())) (list 'c) '())
(append (list 'a) (list (append (list `list) (list `1) (list `2) '())) (list 'c) '())
(append (list 'a) (list (append (list 'list) (list '1) (list '2) '())) (list 'c) '())

(let ((a 1)
      (c 3))
  (append (list 'a) (list (append (list 'list) (list '1) (list '2) '())) (list 'c) '()))

;;================================================================================
;;;
;;;    More examples from Seibel
;;;    
(let ((condition '(< x 10))
      (body '((print x) (decf x))))
  `(if ,condition (progn ,@body)))

`(if ,condition (progn ,@body))
`(if ,condition (progn ,@body) . nil)
(append [if] [,condition] [(progn ,@body)] '())
(append (list `if) (list condition) (list `(progn ,@body)) '())
(append (list 'if) (list condition) (list `(progn ,@body . nil)) '())
(append (list 'if) (list condition) (list (append [progn] [,@body] '())) '())
(append (list 'if) (list condition) (list (append (list `progn) body '())) '())
(append (list 'if) (list condition) (list (append (list 'progn) body '())) '())

(let ((condition '(< x 10))
      (body '((print x) (decf x))))
  (append (list 'if) (list condition) (list (append (list 'progn) body '())) '()))

;;================================================================================
(let ((var 'p)
      (start 0)
      (ending-value-name (gensym))
      (end 19)
      (body '((print p) (push p result))))
  `(do ((,var (next-prime ,start) (next-prime (1+ ,var)))
        (,ending-value-name ,end))
       ((> ,var ,ending-value-name))
     ,@body))

`(do ((,var (next-prime ,start) (next-prime (1+ ,var)))
      (,ending-value-name ,end))
     ((> ,var ,ending-value-name))
   ,@body)
`(do ((,var (next-prime ,start) (next-prime (1+ ,var))) (,ending-value-name ,end)) ((> ,var ,ending-value-name)) ,@body . nil)
(append [do] [((,var (next-prime ,start) (next-prime (1+ ,var))) (,ending-value-name ,end))] [((> ,var ,ending-value-name))] [,@body] '())
(append (list `do)
        (list `((,var (next-prime ,start) (next-prime (1+ ,var))) (,ending-value-name ,end)))
        (list `((> ,var ,ending-value-name)))
        body
        '())
(append (list 'do)
        (list `((,var (next-prime ,start) (next-prime (1+ ,var))) (,ending-value-name ,end) . nil))
        (list `((> ,var ,ending-value-name) . nil))
        body
        '())
(append (list 'do)
        (list (append [(,var (next-prime ,start) (next-prime (1+ ,var)))] [(,ending-value-name ,end)] '()))
        (list (append [(> ,var ,ending-value-name)] '()))
        body
        '())
(append (list 'do)
        (list (append (list `(,var (next-prime ,start) (next-prime (1+ ,var))))
                      (list `(,ending-value-name ,end))
                      '()))
        (list (append (list `(> ,var ,ending-value-name))
                      '()))
        body
        '())
(append (list 'do)
        (list (append (list `(,var (next-prime ,start) (next-prime (1+ ,var)) . nil))
                      (list `(,ending-value-name ,end . nil))
                      '()))
        (list (append (list `(> ,var ,ending-value-name . nil))
                      '()))
        body
        '())
(append (list 'do)
        (list (append (list (append [,var] [(next-prime ,start)] [(next-prime (1+ ,var))] '()))
                      (list (append [,ending-value-name] [,end] '()))
                      '()))
        (list (append (list (append [>] [,var] [,ending-value-name] '()))
                      '()))
        body
        '())
(append (list 'do)
        (list (append (list (append (list var) 
                                    (list `(next-prime ,start)) 
                                    (list `(next-prime (1+ ,var)))
                                    '()))
                      (list (append (list ending-value-name) (list end) '()))
                      '()))
        (list (append (list (append (list `>) (list var) (list ending-value-name) '()))
                      '()))
        body
        '())
(append (list 'do)
        (list (append (list (append (list var) 
                                    (list `(next-prime ,start . nil)) 
                                    (list `(next-prime (1+ ,var) . nil))
                                    '()))
                      (list (append (list ending-value-name) (list end) '()))
                      '()))
        (list (append (list (append (list '>) (list var) (list ending-value-name) '()))
                      '()))
        body
        '())
(append (list 'do)
        (list (append (list (append (list var) 
                                    (list (append [next-prime] [,start] '()))
                                    (list (append [next-prime] [(1+ ,var)] '()))
                                    '()))
                      (list (append (list ending-value-name) (list end) '()))
                      '()))
        (list (append (list (append (list '>) (list var) (list ending-value-name) '()))
                      '()))
        body
        '())
(append (list 'do)
        (list (append (list (append (list var) 
                                    (list (append (list `next-prime) (list start) '()))
                                    (list (append (list `next-prime) (list `(1+ ,var)) '()))
                                    '()))
                      (list (append (list ending-value-name) (list end) '()))
                      '()))
        (list (append (list (append (list '>) (list var) (list ending-value-name) '()))
                      '()))
        body
        '())
(append (list 'do)
        (list (append (list (append (list var) 
                                    (list (append (list 'next-prime) (list start) '()))
                                    (list (append (list 'next-prime) (list `(1+ ,var . nil)) '()))
                                    '()))
                      (list (append (list ending-value-name) (list end) '()))
                      '()))
        (list (append (list (append (list '>) (list var) (list ending-value-name) '()))
                      '()))
        body
        '())
(append (list 'do)
        (list (append (list (append (list var) 
                                    (list (append (list 'next-prime) (list start) '()))
                                    (list (append (list 'next-prime) (list (append [1+] [,var] '())) '()))
                                    '()))
                      (list (append (list ending-value-name) (list end) '()))
                      '()))
        (list (append (list (append (list '>) (list var) (list ending-value-name) '()))
                      '()))
        body
        '())
(append (list 'do)
        (list (append (list (append (list var) 
                                    (list (append (list 'next-prime) (list start) '()))
                                    (list (append (list 'next-prime) (list (append (list `1+) (list var) '())) '()))
                                    '()))
                      (list (append (list ending-value-name) (list end) '()))
                      '()))
        (list (append (list (append (list '>) (list var) (list ending-value-name) '()))
                      '()))
        body
        '())
(append (list 'do)
        (list (append (list (append (list var) 
                                    (list (append (list 'next-prime) (list start) '()))
                                    (list (append (list 'next-prime) (list (append (list '1+) (list var) '())) '()))
                                    '()))
                      (list (append (list ending-value-name) (list end) '()))
                      '()))
        (list (append (list (append (list '>) (list var) (list ending-value-name) '()))
                      '()))
        body
        '())

(let ((var 'p)
      (start 0)
      (ending-value-name (gensym))
      (end 19)
      (body '((print p) (push p result))))
  (append (list 'do)
          (list (append (list (append (list var) 
                                      (list (append (list 'next-prime) (list start) '()))
                                      (list (append (list 'next-prime) (list (append (list '1+) (list var) '())) '()))
                                      '()))
                        (list (append (list ending-value-name) (list end) '()))
                        '()))
          (list (append (list (append (list '>) (list var) (list ending-value-name) '()))
                        '()))
          body
          '()))


;;;
;;;    Seibel's summary:
;;;    
(let ((var 'p)
      (start 0)
      (ending-value-name (gensym))
      (end 19)
      (body '((print p) (push p result))))
(append '(do)
          (list  (list (list var
                             (list 'next-prime start)
                             (list 'next-prime (list '1+ var)))))
          (list (list (list '> var end)))
          body))

;;================================================================================
(let ((names '(a b c))
      (body '((print (* a b)) (print (+ a c)))))
  `(let ,(loop for n in names collect `(,n (gensym)))
     ,@body))

`(let ,(loop for n in names collect `(,n (gensym))) ,@body)
`(let ,(loop for n in names collect `(,n (gensym))) ,@body . nil)
(append [let] [,(loop for n in names collect `(,n (gensym)))] [,@body] '())
(append (list `let) (list (loop for n in names collect `(,n (gensym)))) body '())
(append (list 'let) (list (loop for n in names collect `(,n (gensym) . nil))) body '())
(append (list 'let) (list (loop for n in names collect (append [,n] [(gensym)] '()))) body '())
(append (list 'let) (list (loop for n in names collect (append (list n) (list `(gensym)) '()))) body '())
(append (list 'let) (list (loop for n in names collect (append (list n) (list `(gensym . nil)) '()))) body '())
(append (list 'let) (list (loop for n in names collect (append (list n) (list (append [gensym] '())) '()))) body '())
(append (list 'let) (list (loop for n in names collect (append (list n) (list (append (list `gensym) '())) '()))) body '())
(append (list 'let) (list (loop for n in names collect (append (list n) (list (append (list 'gensym) '())) '()))) body '())

(let ((names '(a b c))
      (body '((print (* a b)) (print (+ a c)))))
  (append (list 'let) (list (loop for n in names collect (append (list n) (list (append (list 'gensym) '())) '()))) body '()))

;;;
;;;  If the backquote syntax is nested, the innermost backquoted form should be expanded first. This means that if several commas occur in a row, the leftmost one belongs to the innermost backquote.
;;;  
`(let ,(loop for n in names collect `(,n (gensym))) ,@body)
`(let ,(loop for n in names collect `(,n (gensym) . nil)) ,@body)
`(let ,(loop for n in names collect (append [,n] [(gensym)] '())) ,@body)
`(let ,(loop for n in names collect (append (list n) (list `(gensym)) '())) ,@body)
`(let ,(loop for n in names collect (append (list n) (list `(gensym . nil)) '())) ,@body)
`(let ,(loop for n in names collect (append (list n) (list (append [gensym] '())) '())) ,@body)
`(let ,(loop for n in names collect (append (list n) (list (append (list `gensym) '())) '())) ,@body)
`(let ,(loop for n in names collect (append (list n) (list (append (list 'gensym) '())) '())) ,@body)
`(let ,(loop for n in names collect (append (list n) (list (append (list 'gensym) '())) '())) ,@body . nil)
(append [let] [,(loop for n in names collect (append (list n) (list (append (list 'gensym) '())) '()))] [,@body] '())
(append (list `let) (list (loop for n in names collect (append (list n) (list (append (list 'gensym) '())) '()))) body '())
(append (list 'let) (list (loop for n in names collect (append (list n) (list (append (list 'gensym) '())) '()))) body '())


;;================================================================================
(let ((forms '((< 2 3) (= 8 9))))
  `(progn ,@(loop for f in forms collect `(report-result ,f ',f))))

`(progn ,@(loop for f in forms collect `(report-result ,f ',f)))
`(progn ,@(loop for f in forms collect `(report-result ,f ',f)) . nil)
(append [progn] [,@(loop for f in forms collect `(report-result ,f ',f))] '())
(append (list `progn) (loop for f in forms collect `(report-result ,f ',f)) '())
(append (list 'progn) (loop for f in forms collect `(report-result ,f ',f . nil)) '())
(append (list 'progn) (loop for f in forms collect (append [report-result] [,f] [',f] '())) '())
(append (list 'progn) (loop for f in forms collect (append (list `report-result) (list f) (list `',f) '())) '())
(append (list 'progn) (loop for f in forms collect (append (list 'report-result) (list f) (list `(quote ,f)) '())) '())
(append (list 'progn) (loop for f in forms collect (append (list 'report-result) (list f) (list `(quote ,f . nil)) '())) '())
(append (list 'progn) (loop for f in forms collect (append (list 'report-result) (list f) (list (append [quote] [,f] '())) '())) '())
(append (list 'progn) (loop for f in forms collect (append (list 'report-result) (list f) (list (append (list `quote) (list f) '())) '())) '())
(append (list 'progn) (loop for f in forms collect (append (list 'report-result) (list f) (list (append (list 'quote) (list f) '())) '())) '())

(let ((forms '((< 2 3) (= 8 9))))
  (append (list 'progn) (loop for f in forms collect (append (list 'report-result) (list f) (list (append (list 'quote) (list f) '())) '())) '()))

;;;
;;;  If the backquote syntax is nested, the innermost backquoted form should be expanded first. This means that if several commas occur in a row, the leftmost one belongs to the innermost backquote.
;;;  
`(progn ,@(loop for f in forms collect `(report-result ,f ',f)))
`(progn ,@(loop for f in forms collect `(report-result ,f ',f . nil)))
`(progn ,@(loop for f in forms collect (append [report-result] [,f] [',f] '())))
`(progn ,@(loop for f in forms collect (append (list `report-result) (list f) (list `',f) '())))
`(progn ,@(loop for f in forms collect (append (list 'report-result) (list f) (list `(quote ,f)) '())))
`(progn ,@(loop for f in forms collect (append (list 'report-result) (list f) (list `(quote ,f . nil)) '())))
`(progn ,@(loop for f in forms collect (append (list 'report-result) (list f) (list (append [quote] [,f] '())) '())))
`(progn ,@(loop for f in forms collect (append (list 'report-result) (list f) (list (append (list `quote) (list f) '())) '())))
`(progn ,@(loop for f in forms collect (append (list 'report-result) (list f) (list (append (list 'quote) (list f) '())) '())))
`(progn ,@(loop for f in forms collect (append (list 'report-result) (list f) (list (append (list 'quote) (list f) '())) '())) . nil)
(append [progn] [,@(loop for f in forms collect (append (list 'report-result) (list f) (list (append (list 'quote) (list f) '())) '()))] '())
(append (list `progn) (loop for f in forms collect (append (list 'report-result) (list f) (list (append (list 'quote) (list f) '())) '())) '())
(append (list 'progn) (loop for f in forms collect (append (list 'report-result) (list f) (list (append (list 'quote) (list f) '())) '())) '())



`(let ((,result t))
      ,@(loop for f in forms collect `(unless ,f (setf ,result nil)))
      ,result)

;;================================================================================
`(defun ,name ,parameters
    (let ((*test-name* ',name))
      ,@body))


(let ((name 'foo)
      (parameters '(x y))
      (body '((print x) (print y))))
  `(defun ,name (,@parameters)
     (let ((*test-name* (append *test-name* (list ',name))))
       ,@body)))

`(defun ,name (,@parameters) (let ((*test-name* (append *test-name* (list ',name)))) ,@body))
`(defun ,name (,@parameters) (let ((*test-name* (append *test-name* (list ',name)))) ,@body) . nil)
(append [defun] [,name] [(,@parameters)] [(let ((*test-name* (append *test-name* (list ',name)))) ,@body)] '())
(append (list `defun) (list name) (list `(,@parameters)) (list `(let ((*test-name* (append *test-name* (list ',name)))) ,@body)) '())
(append (list 'defun) (list name) (list `(,@parameters . nil)) (list `(let ((*test-name* (append *test-name* (list ',name)))) ,@body . nil)) '())
(append (list 'defun) (list name) (list (append [,@parameters] '())) (list (append [let] [((*test-name* (append *test-name* (list ',name))))] [,@body] '())) '())
(append (list 'defun) (list name) (list (append parameters '())) (list (append (list `let) (list `((*test-name* (append *test-name* (list ',name))))) body '())) '())
(append (list 'defun) (list name) (list (append parameters '())) (list (append (list 'let) (list `((*test-name* (append *test-name* (list ',name))) . nil)) body '())) '())
(append (list 'defun) (list name) (list (append parameters '())) (list (append (list 'let) (list (append [(*test-name* (append *test-name* (list ',name)))] '())) body '())) '())
(append (list 'defun) (list name) (list (append parameters '())) (list (append (list 'let) (list (append (list `(*test-name* (append *test-name* (list ',name)))) '())) body '())) '())
(append (list 'defun) (list name) (list (append parameters '())) (list (append (list 'let) (list (append (list `(*test-name* (append *test-name* (list ',name)) . nil)) '())) body '())) '())
(append (list 'defun) (list name) (list (append parameters '())) (list (append (list 'let) (list (append (list (append [*test-name*] [(append *test-name* (list ',name))] '())) '())) body '())) '())
(append (list 'defun) (list name) (list (append parameters '())) (list (append (list 'let) (list (append (list (append (list `*test-name*) (list `(append *test-name* (list ',name))) '())) '())) body '())) '())
(append (list 'defun) (list name) (list (append parameters '())) (list (append (list 'let) (list (append (list (append (list '*test-name*) (list `(append *test-name* (list ',name) . nil)) '())) '())) body '())) '())
(append (list 'defun) (list name) (list (append parameters '())) (list (append (list 'let) (list (append (list (append (list '*test-name*) (list (append [append] [*test-name*] [(list ',name)] '())) '())) '())) body '())) '())
(append (list 'defun) (list name) (list (append parameters '())) (list (append (list 'let) (list (append (list (append (list '*test-name*) (list (append (list `append) (list `*test-name*) (list `(list ',name)) '())) '())) '())) body '())) '())
(append (list 'defun) (list name) (list (append parameters '())) (list (append (list 'let) (list (append (list (append (list '*test-name*) (list (append (list 'append) (list '*test-name*) (list `(list ',name . nil)) '())) '())) '())) body '())) '())
(append (list 'defun) (list name) (list (append parameters '())) (list (append (list 'let) (list (append (list (append (list '*test-name*) (list (append (list 'append) (list '*test-name*) (list (append [list] [',name] '())) '())) '())) '())) body '())) '())
(append (list 'defun) (list name) (list (append parameters '())) (list (append (list 'let) (list (append (list (append (list '*test-name*) (list (append (list 'append) (list '*test-name*) (list (append (list `list) (list `',name) '())) '())) '())) '())) body '())) '())
(append (list 'defun)
        (list name)
        (list (append parameters '()))
        (list (append (list 'let) (list (append (list (append (list '*test-name*) (list (append (list 'append) (list '*test-name*) (list (append (list 'list) (list `(quote ,name . nil)) '())) '())) '())) '())) body '())) '())
(append (list 'defun)
        (list name)
        (list (append parameters '()))
        (list (append (list 'let) (list (append (list (append (list '*test-name*) (list (append (list 'append) (list '*test-name*) (list (append (list 'list) (list (append [quote] [,name] '())) '())) '())) '())) '())) body '())) '())
(append (list 'defun)
        (list name)
        (list (append parameters '()))
        (list (append (list 'let) (list (append (list (append (list '*test-name*) (list (append (list 'append) (list '*test-name*) (list (append (list 'list) (list (append (list `quote) (list name) '())) '())) '())) '())) '())) body '())) '())
(append (list 'defun)
        (list name)
        (list (append parameters '()))
        (list (append (list 'let) (list (append (list (append (list '*test-name*) (list (append (list 'append) (list '*test-name*) (list (append (list 'list) (list (append (list 'quote) (list name) '())) '())) '())) '())) '())) body '())) '())

(let ((name 'foo)
      (parameters '(x y))
      (body '((print x) (print y))))
  (append (list 'defun)
          (list name)
          (list (append parameters '()))
          (list (append (list 'let) (list (append (list (append (list '*test-name*) (list (append (list 'append) (list '*test-name*) (list (append (list 'list) (list (append (list 'quote) (list name) '())) '())) '())) '())) '())) body '())) '()))


;;================================================================================
(defmacro once-only ((&rest names) &body body)
  (let ((gensyms (loop for n in names collect (gensym))))
    `(let (,@(loop for g in gensyms collect `(,g (gensym))))
      `(let (,,@(loop for g in gensyms for n in names collect ``(,,g ,,n)))
        ,(let (,@(loop for n in names for g in gensyms collect `(,n ,g)))
           ,@body)))))

`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   `(let (,,@(loop for g in gensyms for n in names collect ``(,,g ,,n)))
      ,(let (,@(loop for n in names for g in gensyms collect `(,n ,g)))
         ,@body)))
`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   `(let (,,@(loop for g in gensyms for n in names collect ``(,,g ,,n . nil)))
      ,(let (,@(loop for n in names for g in gensyms collect `(,n ,g)))
         ,@body)))
`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   `(let (,,@(loop for g in gensyms for n in names collect `(append [,,g] [,,n] '())))
      ,(let (,@(loop for n in names for g in gensyms collect `(,n ,g)))
         ,@body)))
`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   `(let (,,@(loop for g in gensyms for n in names collect `(append (list ,g) (list ,n) '())))
      ,(let (,@(loop for n in names for g in gensyms collect `(,n ,g)))
         ,@body)))
`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   `(let (,,@(loop for g in gensyms for n in names collect `(append (list ,g) (list ,n) '() . nil)))
      ,(let (,@(loop for n in names for g in gensyms collect `(,n ,g . nil)))
         ,@body)))
`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   `(let (,,@(loop for g in gensyms for n in names collect (append [append] [(list ,g)] [(list ,n)] ['()] '())))
      ,(let (,@(loop for n in names for g in gensyms collect (append [,n] [,g] '())))
         ,@body)))
`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   `(let (,,@(loop for g in gensyms for n in names collect (append (list `append) (list `(list ,g)) (list `(list ,n)) (list `'()) '())))
      ,(let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
         ,@body)))
`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   `(let (,,@(loop for g in gensyms for n in names collect (append (list 'append) (list `(list ,g . nil)) (list `(list ,n . nil)) (list `(quote ())) '())))
      ,(let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
         ,@body)))
`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   `(let (,,@(loop for g in gensyms for n in names collect (append (list 'append) (list (append [list] [,g] '())) (list (append [list] [,n] '())) (list `(quote () . nil)) '())))
      ,(let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
         ,@body)))
`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   `(let (,,@(loop for g in gensyms for n in names collect (append (list 'append) (list (append (list `list) (list g) '())) (list (append (list `list) (list n) '())) (list (append [quote] [()] '())) '())))
      ,(let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
         ,@body)))
`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   `(let (,,@(loop for g in gensyms for n in names collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list `quote) (list `()) '())) '())))
      ,(let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
         ,@body)))
`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   `(let (,,@(loop for g in gensyms for n in names collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '())))
      ,(let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
         ,@body)))
`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   `(let (,,@(loop for g in gensyms for n in names collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '())))
      ,(let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
         ,@body) . nil))

`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   (append [let]
           [(,,@(loop for g in gensyms for n in names collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '())))]
           [,(let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                  ,@body)] '()))
`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   (append (list `let)
           (list `(,,@(loop for g in gensyms for n in names collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))))
           (list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                   ,@body)) '()))
`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   (append (list 'let)
           (list `(,,@(loop for g in gensyms for n in names collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '())) . nil))
           (list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                   ,@body)) '()))
`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   (append (list 'let)
           (list (append [,,@(loop for g in gensyms for n in names 
                                   collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))] '()))
           (list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                   ,@body)) '()))
`(let (,@(loop for g in gensyms collect `(,g (gensym))))
   (append (list 'let)
           (list (append (list ,@(loop for g in gensyms for n in names 
                                       collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '()))
           (list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                   ,@body)) '()))
`(let (,@(loop for g in gensyms collect `(,g (gensym) . nil)))
   (append (list 'let)
           (list (append (list ,@(loop for g in gensyms for n in names 
                                       collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '()))
           (list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                   ,@body)) '()))
`(let (,@(loop for g in gensyms collect (append [,g] [(gensym)] '())))
   (append (list 'let)
           (list (append (list ,@(loop for g in gensyms for n in names 
                                       collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '()))
           (list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                   ,@body)) '()))
`(let (,@(loop for g in gensyms collect (append (list g) (list `(gensym)) '())))
   (append (list 'let)
           (list (append (list ,@(loop for g in gensyms for n in names 
                                       collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '()))
           (list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                   ,@body)) '()))
`(let (,@(loop for g in gensyms collect (append (list g) (list `(gensym . nil)) '())))
   (append (list 'let)
           (list (append (list ,@(loop for g in gensyms for n in names 
                                       collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '()))
           (list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                   ,@body)) '()))
`(let (,@(loop for g in gensyms collect (append (list g) (list (append [gensym] '())) '())))
   (append (list 'let)
           (list (append (list ,@(loop for g in gensyms for n in names 
                                       collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '()))
           (list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                   ,@body)) '()))
`(let (,@(loop for g in gensyms collect (append (list g) (list (append (list `gensym) '())) '())))
   (append (list 'let)
           (list (append (list ,@(loop for g in gensyms for n in names 
                                       collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '()))
           (list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                   ,@body)) '()))
`(let (,@(loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '())))
   (append (list 'let)
           (list (append (list ,@(loop for g in gensyms for n in names 
                                       collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '()))
           (list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                   ,@body)) '()))
`(let (,@(loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '())))
   (append (list 'let)
           (list (append (list ,@(loop for g in gensyms for n in names 
                                       collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '()))
           (list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                   ,@body)) '()) . nil)
(append [let]
        [(,@(loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '())))]
        [(append (list 'let)
                 (list (append (list ,@(loop for g in gensyms for n in names 
                                             collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '()))
                 (list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                         ,@body)) '())] '())
(append (list `let)
        (list `(,@(loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '()))))
        (list `(append (list 'let)
                       (list (append (list ,@(loop for g in gensyms for n in names 
                                                   collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '()))
                       (list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                               ,@body)) '())) '())
(append (list 'let)
        (list `(,@(loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '())) . nil))
        (list `(append (list 'let)
                       (list (append (list ,@(loop for g in gensyms for n in names 
                                                   collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '()))
                       (list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                               ,@body)) '() . nil)) '())
(append (list 'let)
        (list (append [,@(loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '()))] '()))
        (list (append [append]
                      [(list 'let)]
                      [(list (append (list ,@(loop for g in gensyms for n in names 
                                                   collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '()))]
                      [(list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                               ,@body)) '()] '())) '())
(append (list 'let)
        (list (append (loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '())) '()))
        (list (append (list `append)
                      (list `(list 'let))
                      (list `(list (append (list ,@(loop for g in gensyms for n in names 
                                                         collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '())))
                      (list `(list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                                     ,@body)) '()) '())) '())
(append (list 'let)
        (list (append (loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '())) '()))
        (list (append (list 'append)
                      (list `(list 'let . nil))
                      (list `(list (append (list ,@(loop for g in gensyms for n in names 
                                                         collect (append (list 'append)
                                                                         (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '()) . nil))
                      (list `(list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                                     ,@body) . nil)
                            '())
                      '()))
        '())
(append (list 'let)
        (list (append (loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '())) '()))
        (list (append (list 'append)
                      (list (append [list] ['let] '()))
                      (list (append [list] [(append (list ,@(loop for g in gensyms for n in names 
                                                                  collect (append (list 'append)
                                                                                  (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '())] '()))
                      (list (append [list] [(let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                                              ,@body)] '())
                            '())
                      '()))
        '())
(append (list 'let)
        (list (append (loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '())) '()))
        (list (append (list 'append)
                      (list (append (list `list) (list `'let) '()))
                      (list (append (list `list) (list `(append (list ,@(loop for g in gensyms for n in names 
                                                                              collect (append (list 'append)
                                                                                              (list (append (list 'list) (list g) '()))
                                                                                              (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '())) '()))
                      (list (append (list `list) (list `(let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                                                          ,@body)) '())
                            '())
                      '()))
        '())
(append (list 'let)
        (list (append (loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '())) '()))
        (list (append (list 'append)
                      (list (append (list 'list) (list `(quote let)) '()))
                      (list (append (list 'list) (list `(append (list ,@(loop for g in gensyms for n in names 
                                                                              collect (append (list 'append)
                                                                                              (list (append (list 'list) (list g) '()))
                                                                                              (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '()))
                                                                                              '())))
                                                                '() . nil))
                                    '()))
                      (list (append (list 'list)
                                    (list `(let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                                             ,@body . nil))
                                    '())
                            '())
                      '()))
        '())
(append (list 'let)
        (list (append (loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '())) '()))
        (list (append (list 'append)
                      (list (append (list 'list) (list `(quote let . nil)) '()))
                      (list (append (list 'list) (list (append [append]
                                                               [(list ,@(loop for g in gensyms for n in names 
                                                                              collect (append (list 'append)
                                                                                              (list (append (list 'list) (list g) '()))
                                                                                              (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '()))
                                                                                              '())))]
                                                                ['()] '()))
                                    '()))
                      (list (append (list 'list)
                                    (list (append [let]
                                                  [(,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))]
                                                  [,@body] '()))
                                    '())
                            '())
                      '()))
        '())
(append (list 'let)
        (list (append (loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '())) '()))
        (list (append (list 'append)
                      (list (append (list 'list) (list (append [quote] [let] '())) '()))
                      (list (append (list 'list) (list (append (list `append)
                                                               (list `(list ,@(loop for g in gensyms for n in names 
                                                                                    collect (append (list 'append)
                                                                                                    (list (append (list 'list) (list g) '()))
                                                                                                    (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '()))
                                                                                                    '()))))
                                                                (list `'()) '()))
                                    '()))
                      (list (append (list 'list)
                                    (list (append (list `let)
                                                  (list `(,@(loop for n in names for g in gensyms collect (append (list n) (list g) '()))))
                                                  body '()))
                                    '())
                            '())
                      '()))
        '())
(append (list 'let)
        (list (append (loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '())) '()))
        (list (append (list 'append)
                      (list (append (list 'list) (list (append (list `quote) (list `let) '())) '()))
                      (list (append (list 'list) (list (append (list 'append)
                                                               (list `(list ,@(loop for g in gensyms for n in names 
                                                                                    collect (append (list 'append)
                                                                                                    (list (append (list 'list) (list g) '()))
                                                                                                    (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '()))
                                                                                                    '())) . nil))
                                                                (list `(quote ())) '()))
                                    '()))
                      (list (append (list 'list)
                                    (list (append (list 'let)
                                                  (list `(,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())) . nil))
                                                  body '()))
                                    '())
                            '())
                      '()))
        '())
(append (list 'let)
        (list (append (loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '())) '()))
        (list (append (list 'append)
                      (list (append (list 'list) (list (append (list 'quote) (list 'let) '())) '()))
                      (list (append (list 'list) (list (append (list 'append)
                                                               (list (append [list]
                                                                             [,@(loop for g in gensyms for n in names 
                                                                                      collect (append (list 'append)
                                                                                                      (list (append (list 'list) (list g) '()))
                                                                                                      (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '()))
                                                                                                      '()))] '()))
                                                                (list `(quote () . nil)) '()))
                                    '()))
                      (list (append (list 'list)
                                    (list (append (list 'let)
                                                  (list (append [,@(loop for n in names for g in gensyms collect (append (list n) (list g) '()))] '()))
                                                  body '()))
                                    '())
                            '())
                      '()))
        '())
(append (list 'let)
        (list (append (loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '())) '()))
        (list (append (list 'append)
                      (list (append (list 'list) (list (append (list 'quote) (list 'let) '())) '()))
                      (list (append (list 'list) (list (append (list 'append)
                                                               (list (append (list `list)
                                                                             (loop for g in gensyms for n in names 
                                                                                   collect (append (list 'append)
                                                                                                   (list (append (list 'list) (list g) '()))
                                                                                                   (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '()))
                                                                                                   '()))
                                                                             '()))
                                                                (list (append [quote] [()] '())) '()))
                                    '()))
                      (list (append (list 'list)
                                    (list (append (list 'let)
                                                  (list (append (loop for n in names for g in gensyms collect (append (list n) (list g)
                                                                                                                      '()))
                                                                '()))
                                                  body '()))
                                    '())
                            '())
                      '()))
        '())
(append (list 'let)
        (list (append (loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '())) '()))
        (list (append (list 'append)
                      (list (append (list 'list) (list (append (list 'quote) (list 'let) '())) '()))
                      (list (append (list 'list) (list (append (list 'append)
                                                               (list (append (list 'list)
                                                                             (loop for g in gensyms for n in names 
                                                                                   collect (append (list 'append)
                                                                                                   (list (append (list 'list) (list g) '()))
                                                                                                   (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '()))
                                                                                                   '()))
                                                                             '()))
                                                                (list (append (list `quote) (list `()) '())) '()))
                                    '()))
                      (list (append (list 'list)
                                    (list (append (list 'let)
                                                  (list (append (loop for n in names for g in gensyms collect (append (list n) (list g)
                                                                                                                      '()))
                                                                '()))
                                                  body '()))
                                    '())
                            '())
                      '()))
        '())
(append (list 'let)
        (list (append (loop for g in gensyms collect (append (list g)
                                                             (list (append (list 'gensym)
                                                                           '()))
                                                             '()))
                      '()))
        (list (append (list 'append)
                      (list (append (list 'list)
                                    (list (append (list 'quote)
                                                  (list 'let)
                                                  '()))
                                    '()))
                      (list (append (list 'list)
                                    (list (append (list 'append)
                                                  (list (append (list 'list)
                                                                (loop for g in gensyms for n in names 
                                                                      collect (append (list 'append)
                                                                                      (list (append (list 'list)
                                                                                                    (list g)
                                                                                                    '()))
                                                                                      (list (append (list 'list)
                                                                                                    (list n)
                                                                                                    '()))
                                                                                      (list (append (list 'quote)
                                                                                                    (list '())
                                                                                                    '()))
                                                                                      '()))
                                                                '()))
                                                  (list (append (list 'quote)
                                                                (list '())
                                                                '()))
                                                  '()))
                                    '()))
                      (list (append (list 'list)
                                    (list (append (list 'let)
                                                  (list (append (loop for n in names for g in gensyms collect (append (list n)
                                                                                                                      (list g)
                                                                                                                      '()))
                                                                '()))
                                                  body
                                                  '()))
                                    '())
                            '())
                      '()))
        '())

;;================================================================================
(let* ((names  '(a b c))
       (gensyms (loop for n in names collect (gensym)))
       (body '((print (list a b c)))))
  (append (list 'let)
          (list (append (loop for g in gensyms collect (append (list g)
                                                               (list (append (list 'gensym)
                                                                             '()))
                                                               '()))
                        '()))
          (list (append (list 'append)
                        (list (append (list 'list)
                                      (list (append (list 'quote)
                                                    (list 'let)
                                                    '()))
                                      '()))
                        (list (append (list 'list)
                                      (list (append (list 'append)
                                                    (list (append (list 'list)
                                                                  (loop for g in gensyms for n in names 
                                                                        collect (append (list 'append)
                                                                                        (list (append (list 'list)
                                                                                                      (list g)
                                                                                                      '()))
                                                                                        (list (append (list 'list)
                                                                                                      (list n)
                                                                                                      '()))
                                                                                        (list (append (list 'quote)
                                                                                                      (list '())
                                                                                                      '()))
                                                                                        '()))
                                                                  '()))
                                                    (list (append (list 'quote)
                                                                  (list '())
                                                                  '()))
                                                    '()))
                                      '()))
                        (list (append (list 'list)
                                      (list (append (list 'let)
                                                    (list (append (loop for n in names for g in gensyms collect (append (list n)
                                                                                                                        (list g)
                                                                                                                        '()))
                                                                  '()))
                                                    body
                                                    '()))
                                      '())
                              '())
                        '()))
          '()))

;;================================================================================
(let* ((names  '(a b c))
       (gensyms (loop for n in names collect (gensym)))
       (body '((print (list a b c)))))
  `(let (,@(loop for g in gensyms collect `(,g (gensym))))
     `(let (,,@(loop for g in gensyms for n in names collect ``(,,g ,,n)))
        ,(let (,@(loop for n in names for g in gensyms collect `(,n ,g)))
              ,@body))))

;;================================================================================
(defmacro do-primes ((var start end) &body body)
  (once-only (start end)
    `(do ((,var (next-prime ,start) (next-prime (1+ ,var))))
         ((> ,var ,end))
       ,@body)))

(LET ((#:G673 (GENSYM)) (#:G674 (GENSYM)) (#:G675 (GENSYM)))
  `(LET ((,#:G673 ,A) (,#:G674 ,B) (,#:G675 ,C))
     ,(LET ((A #:G673) (B #:G674) (C #:G675))
        (PRINT (LIST A B C)))))

(LET ((#:G676 (GENSYM)) (#:G677 (GENSYM)) (#:G678 (GENSYM)))
  (APPEND (LIST 'LET)
          (LIST
           (APPEND
            (LIST (APPEND (LIST #:G676) (LIST A) 'NIL)
                  (APPEND (LIST #:G677) (LIST B) 'NIL)
                  (APPEND (LIST #:G678) (LIST C) 'NIL))
            'NIL))
          (LIST
           (LET ((A #:G676) (B #:G677) (C #:G678))
             (PRINT (LIST A B C))))
          NIL))

(LET ((#:G676 (GENSYM)) (#:G677 (GENSYM)) (#:G678 (GENSYM)))
  (LET ((#:G676 A)
        (#:G677 B)
        (#:G678 C))
    (LET ((A #:G676) (B #:G677) (C #:G678))
      (PRINT (LIST A B C)))))


(LET ((G676 (GENSYM)) (G677 (GENSYM)) (G678 (GENSYM)))
  (APPEND (LIST 'LET)
          (LIST
           (APPEND
            (LIST (APPEND (LIST G676) (LIST A) 'NIL)
                  (APPEND (LIST G677) (LIST B) 'NIL)
                  (APPEND (LIST G678) (LIST C) 'NIL))
            'NIL))
          (LIST
           (LET ((A G676) (B G677) (C G678))
             (PRINT (LIST A B C))))
          NIL))


(let* ((names  '(a b c))
       (gensyms (loop for n in names collect (gensym)))
       (body '((print (list a b c)))))
(append (list 'let)
        (list (append (loop for g in gensyms collect (append (list g) (list (append (list 'gensym) '())) '())) '()))
        (list (append (list `append)
                      (list `(list 'let))
                      (list `(list (append (list ,@(loop for g in gensyms for n in names 
                                                         collect (append (list 'append) (list (append (list 'list) (list g) '())) (list (append (list 'list) (list n) '())) (list (append (list 'quote) (list '()) '())) '()))) '())))
                      (list `(list (let (,@(loop for n in names for g in gensyms collect (append (list n) (list g) '())))
                                     ,@body)) '()) '())) '()))

;;================================================================================
(defmacro once-only ((&rest names) &body body)
  (let ((gensyms (loop for n in names collect (gensym))))
    `(let (,@(loop for g in gensyms collect `(,g (gensym))))
      `(let (,,@(loop for g in gensyms for n in names collect ``(,,g ,,n)))
        ,(let (,@(loop for n in names for g in gensyms collect `(,n ,g)))
           ,@body)))))

(defmacro once-only* ((&rest names) &body body)
  (let ((gensyms (loop for n in names collect (gensym))))
  (append (list 'let)
          (list (append (loop for g in gensyms collect (append (list g)
                                                               (list (append (list 'gensym)
                                                                             '()))
                                                               '()))
                        '()))
          (list (append (list 'append)
                        (list (append (list 'list)
                                      (list (append (list 'quote)
                                                    (list 'let)
                                                    '()))
                                      '()))
                        (list (append (list 'list)
                                      (list (append (list 'append)
                                                    (list (append (list 'list)
                                                                  (loop for g in gensyms for n in names 
                                                                        collect (append (list 'append)
                                                                                        (list (append (list 'list)
                                                                                                      (list g)
                                                                                                      '()))
                                                                                        (list (append (list 'list)
                                                                                                      (list n)
                                                                                                      '()))
                                                                                        (list (append (list 'quote)
                                                                                                      (list '())
                                                                                                      '()))
                                                                                        '()))
                                                                  '()))
                                                    (list (append (list 'quote)
                                                                  (list '())
                                                                  '()))
                                                    '()))
                                      '()))
                        (list (append (list 'list)
                                      (list (append (list 'let)
                                                    (list (append (loop for n in names for g in gensyms collect (append (list n)
                                                                                                                        (list g)
                                                                                                                        '()))
                                                                  '()))
                                                    body
                                                    '()))
                                      '())
                              '())
                        '()))
          '()))

(defmacro do-primes* ((var start end) &body body)
  (once-only* (start end)
    `(do ((,var (next-prime ,start) (next-prime (1+ ,var))))
         ((> ,var ,end))
       ,@body)))
