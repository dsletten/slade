-Programmer working w/ team, modular code
Wilensky 17.4
Seibel 263 avoid name conflicts between independently developed pieces of code
  Learn names in Common Lisp - don't want to have to learn everything about 3rd party library vs. public API
  Control how reader translates names -> symbols (consistency above)
-Consistency between reading symbol/later access
Wilensky 17.2
  Distinguish between new symbols and existing ones
    Name refers to previously encountered symbol -> retrieve it to build form
    Symbol is new -> create representation for it


The Lisp reader translates strings of characters (S-expressions) into Lisp objects (forms) which are typically
then handed to EVAL for evaluation. Symbols are one of the key data types that the reader encounters. When the
reader processes a string that represents the name of a symbol, we want to make sure that it associates that
name with the right symbol. In some cases we want a name to be associated with a symbol that is the same as a
previous reference. In other cases we want the name to be associated with a different symbol despite using the same textual representation. 

This issue immediately arises when we start working with a team of programmers who must coordinate their use of
mutually desired names in order to prevent conflicts. And as Shapiro points out, as soon as you start using Lisp
you are already working with a team, namely the team who implemented Lisp.

Packages are a way to control the meaning and accessibility of symbols as a means of organizing code and preventing
name conflicts. Tatar likens a package name to a surname that allows several people to share the same given name as
long as their family name serves to disambiguate them.

Packages also allow code to provide an external interface to users while hiding internal names which are irrelevant
to them. This also removes the burden of having to be aware of those internal names in order to avoid using them
in one's own code. The programmer has had to learn all of the names significant to the Common Lisp language (978 of them!).
He doesn't want to have to worry about all of the names in every library he uses too. Packages can be used to implement
separate modules within a large program.

.......
Seibel 267 emphasizes that packages provide some control over access to symbols by affecting how reader converts textual names into symbol objects, however, this does
not extend to control over access to functions and variables named by such symbols. If a name is able to be accessed, then anything designated by that name is
also accessible. Furthermore, it is only during evaluation (after reading has taken place) that the system determines what a given name refers to. It doesn't make sense
to speak of exporting a function or variable from a package. Package system controls (incompletely) what names you can refer to not what you can do with those names.
.......


[[-Representation of symbols
Wilensky 17.3
  Symbol table maintains association between symbol names w/ internal representation]]

-Package
Wilensky 17.4
  Data structure that serves as symbol table
    Interface between names typed by user, internal representations stored by system
  Current package *package*
  READ encounters symbol name -> check in current package for existing symbol
    If one accessible, use it. Otherwise make symbol, add to current pkg.
                                 Subsequent reference -> same representation.

A package is a data structure that serves as a symbol table. [Wilensky 292 Package is symbol-table-like object. Kessler states that packages are hashtables which reference a single symbol table]
CLHS says: A package is a namespace that maps symbol names to symbols.
Wilensky (pg. 294) describes a package as "an interface between the print names typed by the user and the internal representations
of symbols stored by Lisp". A symbol is more than just a name, and the package maintains the association between a name and the symbol object that it names.

There is one package that is active at any moment. This is known as the current package:
*PACKAGE*

When READ encounters a symbol name it checks in the current package to see if such a symbol already exists. If so, it uses a
reference to that symbol in the form that it is building. If there is no symbol with that name in the package yet, READ causes
the symbol to be created and added to the current package. Subsequent references to that name will refer to the new symbol.

[[Illustration Wilensky notes pg. 1]]
[[Illustration Seibel notes pg. 2]]

Must be able to do so for any potential reference to the same symbol despite syntactically distinct strings:
x
X
cl-user:x

-READ access to symbol table
Seibel 264
  The process of locating a symbol within a package is known as interning (see 256)
  INTERN (READ uses INTERN to make symbols) (consistency above)

  The programmer can also look for a symbol in a given package. This allows the programmer to observe the process of interning directly:
(find-symbol "SQXXQ")
(intern "SQXXQ")
(find-symbol "SQXXQ")

  FIND-SYMBOL
FIND-ALL-SYMBOLS

Seibel 264:
When the reader reads ... a name, it translates it to a symbol by converting any unescaped letters to uppercase and passing the resulting string to INTERN. Thus, each time the reader reads the same name in the same package, it'll get the same symbol object...
[T]he evaluator uses the object identity of symbols to determine which function, variable, or other program element a given symbol refers to.
  
CLHS (2.3.4) says:
When parsing the syntax for a symbol, the Lisp reader looks up the name of that symbol in the current package. This lookup may involve looking in other packages whose external symbols are inherited by the current package. If the name is found, the corresponding symbol is returned. If the name is not found (that is, there is no symbol of that name accessible in the current package), a new symbol is created and is placed in the current package as an internal symbol. The current package becomes the owner (home package) of the symbol, and the symbol becomes interned in the current package. If the name is later read again while this same package is current, the same symbol will be found and returned.

See CLHS 2.3.5 regarding rules concerning package markers.
and 2.3.6 Package System Consistency Rules


-Create new symbols
Wilensky 17.5.1
  MAKE-SYMBOL different invocations -> different symbols

(eq (make-symbol "S") (make-symbol "S")) => NIL
(eq 's (make-symbol "S")) => NIL
(string= (symbol-name (make-symbol "S")) (symbol-name (make-symbol "S"))) => T
(symbol-package (make-symbol "FOO")) => NIL

  #:FOO Symbol has no home pkg! Apparently uninterned

  Reader vs. printer
  READ #:x => uninterned symbol
  WRITE (Apparently) uninterned symbol => #:x CLHS 22.1.3.3.1
Wilensky 295
#: => symbol has not been put into any package, i.e., symbol is not accessible to READ => Can't reference symbol by name.
Not related to existing symbol or subsequently created symbols.

'a
'a
(eq * **) => T

new symbol each time
'#:a
'#:a
(eq * **) => NIL

(defvar #:a 8)
(symbol-value (second +)) => 8

(defun #:f (x) (+ x 9))
(defvar *f* *)
(funcall *f* 2) => 11

COPY-SYMBOL copy-properties (Slade pg. 604)

-Automatic symbol generation
Wilensky 17.5.2
  GENSYM 254
  GENTEMP

-Remove existing ones
Wilensky 17.5.3
  UNINTERN - no way to re-enter symbol into package -> new symbol !! IMPORT allows uninterned symbol to be added package !!
    INTERN takes string as arg, not existing symbol (Cant' SETF SYMBOL-PACKAGE either)
    References to the old symbol may endure => multiple symbols w/ same name 
    Symbol removed from shadowing list (Seibel 266)
    vs. apparently uninterned (SYMBOL-PACKAGE entry)


-Standard CL packages
  CL, CL-USER, KEYWORD nickname "" (only Allegro?) vs. CLHS 2.3.5 (Special reader behavior)
At REPL (initially i.e., *PACKAGE* => CL-USER), type expression, names of Common Lisp functions, macros, variables => symbols in CL. Other names => CL-USER. (Seibel 266)
(let ((z t)) (when z (print 'foo)))

  Can't intern new symbols in CL (Seibel 267)
CLHS 1.9 978 external symbols in CL
11.1.2.1 They are PRESENT in CL, but it's not necessarily their home package.
Seibel 264 Keyword pkg...keywords automatically interned, exported, constant variable w/ self as value (11.1.2.3.1 Interning a Symbol in the KEYWORD Package)
(eq ':a :a)
(symbol-name :a)  Name doesn't contain :
(print :a) (Readable)

Other pkgs in implementation may provide accessible symbols, e.g., QUIT
SB-EXT  SBCL
CCL  Clozure
EXT  CLISP
EXCL Allegro (EXIT)

(Possible name conflicts beside standard Common Lisp names...)


[[-Pkg structure
Wilensky 17.6.1
  Pkg "owns" symbols interned in it
     Pkg is "home pkg" for those symbols

  Pkg references symbols owned by other pkg -> external symbols EXPORT]]


    foo:bar "qualified symbol reference" (Seibel 264 "pkg-qualified name")
    Symbols not declared external -> internal
    For convenience, import (external) symbols IMPORT, no pkg qualifier
    Inherit all external symbols USE-PACKAGE

CLHS: Colon is "package marker" (in standard readtable)
    
:FOO
FOO
PUNG:FOO Error if PUNG neg exports FOO or neg contains FOO
PUNG::FOO Caution. Not intended for use. If you use it, then you have a difference of opinion with the author of the library. You may be right, but make sure you think about it.

[[-Package jargon
Seibel 265
  accessible (FIND-SYMBOL)
  present Pkg symbol table contains entry for symbol
    intern
    home package
  inherit (use external symbols) -> internal symbols
  shadowing symbol
  import -> present (symbol can be present in >1 pkgs)
  Only "present" symbols -> export/shadow]]

EXPORT -> qualified name (Not accessible)
IMPORT -> unqualified name (accessible and present)
USE-PACKAGE

[[CLHS notes illustration]]

SHADOW
SHADOWING-IMPORT (Slade pg. 600)
UNEXPORT
UNUSE-PACKAGE

11.1.1.2.1 Internal and External Symbols

 mappings in a package divided into two classes: external and internal (external symbols and internal symbols).
 Within a package, a name refers to one symbol or to none;
 if it does refer to a symbol, then it is either external or internal in that package, but not both.

 External symbols are part of the package's public interface to other packages.
 Symbols become external symbols of a given package if they have been exported from that package.

A symbol has the same name no matter what package it is present in, but it might be an external symbol of some packages and an internal symbol of others.

11.1.1.2.2 Package Inheritance

Packages can be built up in layers.
 package is a single collection of mappings from strings into internal symbols and external symbols.
 However, some of these mappings might be established within the package itself,
 while other mappings are INHERITED from other packages via use-package.
 
A symbol is said to be PRESENT in a package if the mapping is in the package itself and is not inherited from somewhere else.

 no way to inherit the internal symbols of another package;
 to refer to an internal symbol using the Lisp reader:
 - package containing the symbol must be made to be the current package
 - package prefix must be used
 - symbol must be imported into the current package.

USE-PACKAGE, INTERN entries: inherited => internal

11.1.1.2.3 Accessibility of Symbols in a Package

 symbol accessible in a package if:
 -that is its home package when it is created
 -it is imported into that package
 -inheritance via use-package.

 Seibel 265 "Accessible" => FIND-SYMBOL finds it.

If a symbol is accessible in a package => referred without a package prefix when that package is the current package, regardless of whether it is present or inherited.

Symbols from one package can be made accessible in another package in two ways.

-- Any individual symbol can be added to a package by use of import.
After the call to import the symbol is present in the importing package.
The status of the symbol in the package it came from (if any) is unchanged, and the home package for this symbol is unchanged.
Once imported, a symbol is present in the importing package and can be removed only by calling unintern.

 Seibel 265 symbol can be present in multiple packages (due to IMPORT)

A symbol is shadowed[3] by another symbol in some package if the first symbol would be accessible by inheritance if not for the presence of the second symbol. See shadowing-import.

-- The second mechanism for making symbols from one package accessible in another is provided by use-package.
All of the external symbols of the used package are inherited by the using package.

[[Venn diagram]]

11.1.1.2.4 Locating a Symbol in a Package

--  external symbols and internal symbols of the package are searched
--  external symbols of the used packages are searched in some unspecified order.
(The order does not matter; see the rules for handling name conflicts listed below.)

11.1.1.2.5 Prevention of Name Conflicts in Packages

Within one package, any particular name can refer to at most one symbol. (FIND-SYMBOL returns 1 or nothing.)

A name conflict is said to occur when there would be more than one candidate symbol.

Any time a name conflict is about to occur => correctable error 

The following rules apply to name conflicts:

-- Name conflicts are detected when they become possible => when package structure is altered.
Name conflicts not checked during every name lookup.

-- If the SAME SYMBOL is accessible to a package through more than one path, there is no name conflict.
A SYMBOL CANNOT CONFLICT WITH ITSELF.
Name conflicts occur only between DISTINCT symbols with the same name (under string=).

-- Every package has a list of shadowing symbols.
 shadowing symbol takes precedence over any other symbol of the same name that would otherwise be accessible in the package.
 A name conflict involving a shadowing symbol is always resolved in favor of the shadowing symbol, without signaling an error (except for one exception involving import). See shadow and shadowing-import.

--  USE-PACKAGE, IMPORT, and EXPORT check for name conflicts.

-- SHADOW and SHADOWING-IMPORT never signal a name-conflict error.

-- UNUSE-PACKAGE and UNEXPORT do not need to do any name-conflict checking.
UNINTERN does name-conflict checking only when a symbol being uninterned is a shadowing symbol.

-- Giving a shadowing symbol to UNINTERN can uncover a name conflict that had previously been resolved by the shadowing.

-- Package functions signal name-conflict errors of type PACKAGE-ERROR before making any change to the package structure.
When multiple changes are to be made, it is permissible for the implementation to process each change separately.
For example, when EXPORT is given a list of symbols, aborting from a name conflict caused by the second symbol in the list might still export the first symbol in the list.
However, a name-conflict error caused by EXPORT of a single symbol will be signaled before that symbol's accessibility in any package is changed.

-- Continuing from a name-conflict error must offer the user a chance to resolve the name conflict in favor of either of the candidates.
The package structure should be altered to reflect the resolution of the name conflict, via SHADOWING-IMPORT, UNINTERN, or UNEXPORT.

-- A name conflict in USE-PACKAGE between a symbol PRESENT in the using package and an EXTERNAL symbol of the used package is resolved:
   in favor of the first symbol by making it a shadowing symbol, (Seibel 265 2 pkgs w/ EXTERNAL symbol of same name) 
   or in favor of the second symbol by uninterning the first symbol from the using package.

-- A name conflict in EXPORT or UNINTERN due to a package's inheriting TWO DISTINCT SYMBOLS with the same name (under string=) from two other packages
can be resolved in favor of either symbol by importing it into the using package and making it a shadowing symbol, just as with use-package.


-Creating packages
Seibel 267
  (MAKE-PACKAGE)
    Representation of package name (string): pkg designator: pkg or string designator: string, char, symbol
    MAKE-PACKAGE pkg itself must be string designator!
      Char => unreasonable name, thus:
      Symbol vs. string -> don't worry about uppercase (Symbol belongs to some pkg, may be used as name for different pkg)
[1]> (make-package "TULP")
#<PACKAGE TULP>
[2]> (in-package "TULP")
#<PACKAGE TULP>
TULP[3]> 'cl-user
CL-USER
TULP[4]> (describe 'cl-user)

CL-USER is the symbol CL-USER, lies in #<PACKAGE TULP>, is accessible in 1 package TULP.

 #<PACKAGE TULP> is the package named TULP.
 It imports the external symbols of 1 package COMMON-LISP and exports no symbols, but no package uses these exports.

TULP[15]> (cl:make-package "DWEG")
#<PACKAGE DWEG>
TULP[16]> (cl:in-package "DWEG")
#<PACKAGE DWEG>
DWEG[17]> (cl:in-package tulp::cl-user)
      Keyword vs. arbitrary symbol -> symbol interned (as junk) in current pkg when DEFPACKAGE form read in.
      Seibel notes pg. 5

PACKAGEP
PACKAGE-NAME/FIND-PACKAGE
PACKAGE-NICKNAMES
PACKAGE-SHADOWING-SYMBOLS

IN-PACKAGE vs. (setf *package* ...) Seibel 269 Footnote 9
RENAME-PACKAGE
DELETE-PACKAGE

  DEFPACKAGE



    Email library example
-Importing individual names
-Excluding individual names
-Use 2 pkgs that export same name:
 -Shadow both
 -Import from one, shadow the other :SHADOWING-IMPORT-FROM

Packaging mechanics
Seibel 272

-Package implements module
Wilensky 17.6
  Internal functions vs. External interface
  Module in own pkg
  
-Modules
Wilensky 17.6.3
  *modules*
  provide
  require


Package gotchas
Seibel 273

DO-SYMBOLS, DO-EXTERNAL-SYMBOLS, DO-ALL-SYMBOLS
PACKAGE-USE-LIST
PACKAGE-USED-BY-LIST
LIST-ALL-PACKAGES
WITH-PACKAGE-ITERATOR

PACKAGE-ERROR-PACKAGE??

CLHS 11.1.1
-When using the Lisp reader, it is possible to refer to symbols in packages other than the current one through the use of package prefixes in the printed representation of the symbol.
-Where an operator takes an argument that is either a symbol or a list of symbols, an argument of nil is treated as an empty list of symbols.
-Any package argument may be either a string, a symbol, or a package. If a symbol is supplied, its name will be used as the package name.

11.1.1.1
-There is a single namespace for packages.

System Class SYMBOL
A symbol is said to be interned in a package if it is accessible in that package; the same symbol can be interned in more than one package. 
When a symbol is first created, it has no home package. When it is first interned, the package in which it is initially interned becomes its home package. The home package of a symbol can be accessed by using the function symbol-package.

System Class PACKAGE
A package is a namespace that maps symbol names to symbols

Wilensky 295 Programs where several symbols having the same name exist "are only occasionally correct".

symbol -> string SYMBOL-NAME
string -> symbol INTERN FIND-SYMBOL

LOAD vs. *PACKAGE*

Package is table mapping strings to symbols.
Package has a name too. Where is table mapping strings (package name) to packages?

Import an inherited symbol? It's possible. What does it mean? See USE-PACKAGE/EXPORT entries. (Can't "unimport" to make it inherited again? (i.e., UNINTERN))
